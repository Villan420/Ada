#include <stdlib.h> 

#include <time.h> 

void merge(int array[], int low, int mid, int high) { 

int i = low; 

int j = mid + 1; 

int k = low; 

int resarray[high+1]; 

while (i <= mid && j <= high) { 

if (array[i] < array[j]) { 

resarray[k++] = array[i++]; 

} else { 

resarray[k++] = array[j++]; 

} 

} 

while (i <= mid) { 

resarray[k++] = array[i++]; 

} 

while (j <= high) { 

resarray[k++] = array[j++]; 

} 

for (int m = low; m <= high; m++) { 
array[m] = resarray[m]; 

} 

} 

void sort(int array[], int low, int high) { 

if (low < high) { 

int mid = (low + high) / 2; 

sort(array, low, mid); 

sort(array, mid + 1, high); 

merge(array, low, mid, high); 

} 

} 


void generateRandomArray(int arr[], int n) { 

srand(time(NULL)); 

for (int i = 0; i < n; i++) { 

arr[i] = rand(); 

} 

} 

int main() { 

int n_values[] = {5000, 10000, 15000, 20000};  

int num_values = sizeof(n_values) / sizeof(n_values[0]); 

double time_taken[num_values]; 

for (int i = 0; i < num_values; i++) { 

int n = n_values[i]; 

int *arr = (int*)malloc(n * sizeof(int)); 

generateRandomArray(arr, n); 
clock_t start = clock(); 

sort(arr, 0, n - 1); 

clock_t end = clock(); 

time_taken[i] = ((double)(end - start)) / CLOCKS_PER_SEC; 

free(arr); 

}  

printf("n\tTime Taken (s)\n"); 

for (int i = 0; i < num_values; i++) { 

printf("%d\t%f\n", n_values[i], time_taken[i]); 

} 


return 0; 

}
